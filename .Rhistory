y1 <- yf(x1, x2, x3)
df <- data.frame(x1 = x1, x2 = x2, x3 = x3, y = y1)
usethis::use_data(df)
?reg_lin
?df
reg_lin(df, "y", c("x1", "x2", "x3"))
reg_lin(df, "y", c("x1", "x2", "x3"))$coeficientes
lm(df, y~x1+x2+x3)
lm(y~x1+x2+x3, df)
reg_lin(df, "y", c("x2"))$coeficientes
lm(y~x2, df)
?reg_lin
usethis::use_test("reg_lin")
y = "Sepal.Length"
class(y)
x = c("Sepal.Length", "Sepal.Width")
class(x)
all(sapply(x, is.character))
x = c("Sepal.Length", 56)
all(sapply(x, is.character))
x = c("Sepal.Length", as.double(56))
all(sapply(x, is.character))
x = "nome"
y = c(1,2,3)
z = c(x, y)
all(sapply(z, is.character))
z[1]
class(z[1])
is.character(y)
is.character(y, z[1])
is.character(y) && is.character(z[1])
y="teste"
is.character(y) && is.character(z[1])
x1 = c(1,2,3,4,5,6,7,8,9)
x2 = c(4,4,4,4,4,4,4,4,4)
y = c(1,2,5,3,6,4,7,9,6)
df =data.frame(y, x1, x2)
data = data.frame(y,x1,x2)
reg_lin(data, "y", c("x1", "x2"))
data = iris
y = "Sepal.Width"
x = c("Petal.Width", "Sepal.Length")
dados = iris
Y = "Sepal.Width"
Xs = c("Petal.Width", "Sepal.Length")
ncol(matrix_X)
# DATAFRAME COM COEFICIENTES
#calculo dos betas
um = rep(1, nrow(dados))
matrix_X = c(um)
i=1
for (i in 1:length(Xs)){ matrix_X = cbind(matrix_X, dados[[Xs[i]]])
i=i+1
}
matrix_X = as.matrix(matrix_X)
matrix_X
ncol(matrix_X)
i=2
matrix_X[i]
matrix_X[1,i]
all(matrix_X[i] == matrix_X[1,i])
matrix_X[2]
matrix_X[3]
matrix_X[3]
matrix_X[1,i]
matrix_X[,i]
all(matrix_X[1,i] == matrix_X[,i])
x1 = c(1,2,3,4,5,6,7,8,9)
> x2 = c(4,4,4,4,4,4,4,4,4)
> y = c(1,2,5,3,6,4,7,9,6)
> data =data.frame(y, x1, x2)
x1 = c(1,2,3,4,5,6,7,8,9)
x2 = c(4,4,4,4,4,4,4,4,4)
y = c(1,2,5,3,6,4,7,9,6)
data =data.frame(y, x1, x2)
reg_lin = function(dados, Y, Xs){
if (is.character(Y) && is.character(Xs[1])) { stop("Erro: A resposta ou preditoras não estão no formato de strings") }
# DATAFRAME COM COEFICIENTES
#calculo dos betas
um = rep(1, nrow(dados))
matrix_X = c(um)
i=1
for (i in 1:length(Xs)){ matrix_X = cbind(matrix_X, dados[[Xs[i]]])
i=i+1
}
matrix_X = as.matrix(matrix_X)
for(i in 2:ncol(matrix_X)){ if(all(matrix_X[1,i] == matrix_X[,i])){ stop("A matriz X é singular") }}
matrix_Y = as.matrix(dados[[Y]])
coeficientes = solve(t(matrix_X)%*%matrix_X)  %*%t(matrix_X) %*% matrix_Y
#criando dataframe
betas = paste0("beta ", 0:(ncol(matrix_X)-1))
nomes = append(c("intercepto"), Xs)
coeficientes = coeficientes %>% as.vector()
dataframe = data.frame(betas, nomes, coeficientes)
# LISTA COM VALORES PREDITOS
preditos = as.vector(matrix_X %*% as.matrix(coeficientes))
# LISTA COM OS RESÍDUOS
residuos = dados[[Y]]-preditos
return(list(coeficientes = dataframe, preditos = preditos, residuos = residuos))
}
reg_lin(data, "y", c("x1", "x2"))
reg_lin = function(dados, Y, Xs){
if (!is.character(Y) || !is.character(Xs[1])) { stop("Erro: A resposta ou preditoras não estão no formato de strings") }
# DATAFRAME COM COEFICIENTES
#calculo dos betas
um = rep(1, nrow(dados))
matrix_X = c(um)
i=1
for (i in 1:length(Xs)){ matrix_X = cbind(matrix_X, dados[[Xs[i]]])
i=i+1
}
matrix_X = as.matrix(matrix_X)
for(i in 2:ncol(matrix_X)){ if(all(matrix_X[1,i] == matrix_X[,i])){ stop("A matriz X é singular") }}
matrix_Y = as.matrix(dados[[Y]])
coeficientes = solve(t(matrix_X)%*%matrix_X)  %*%t(matrix_X) %*% matrix_Y
#criando dataframe
betas = paste0("beta ", 0:(ncol(matrix_X)-1))
nomes = append(c("intercepto"), Xs)
coeficientes = coeficientes %>% as.vector()
dataframe = data.frame(betas, nomes, coeficientes)
# LISTA COM VALORES PREDITOS
preditos = as.vector(matrix_X %*% as.matrix(coeficientes))
# LISTA COM OS RESÍDUOS
residuos = dados[[Y]]-preditos
return(list(coeficientes = dataframe, preditos = preditos, residuos = residuos))
}
reg_lin(data, "y", c("x1", "x2"))
x1 = c(1,2,3,4,5,6,7,8,9)
x2 = c(4,4,4,4,4,4,4,4,4)
y = c(1,2,5,3,6,4,7,9,6)
data = data.frame(y, x1, x2)
reg_lin(data, "y", c("x1","x2"))
reg_lin = function(dados, Y, Xs){
if (!is.character(Y) || !is.character(Xs[1])) { stop("Erro: A resposta ou preditoras não estão no formato de strings") }
# DATAFRAME COM COEFICIENTES
#calculo dos betas
um = rep(1, nrow(dados))
matrix_X = c(um)
i=1
for (i in 1:length(Xs)){ matrix_X = cbind(matrix_X, dados[[Xs[i]]])
i=i+1
}
matrix_X = as.matrix(matrix_X)
for(i in 2:ncol(matrix_X)){ if(all(matrix_X[1,i] == matrix_X[,i])){ stop("Uma das preditoras é constante.") }}
matrix_Y = as.matrix(dados[[Y]])
coeficientes = solve(t(matrix_X)%*%matrix_X)  %*%t(matrix_X) %*% matrix_Y
#criando dataframe
betas = paste0("beta ", 0:(ncol(matrix_X)-1))
nomes = append(c("intercepto"), Xs)
coeficientes = coeficientes %>% as.vector()
dataframe = data.frame(betas, nomes, coeficientes)
# LISTA COM VALORES PREDITOS
preditos = as.vector(matrix_X %*% as.matrix(coeficientes))
# LISTA COM OS RESÍDUOS
residuos = dados[[Y]]-preditos
return(list(coeficientes = dataframe, preditos = preditos, residuos = residuos))
}
reg_lin(data, "y", c("x1","x2"))
predicts = function(modelo, valores){
# valores será um dataframe onde cada linha será os valores para cada predição
resultado = list()
for(i in 1:nrow(valores)){
pred = modelo$coeficientes$coeficientes[1] # pega o beta 0
for(k in 2:nrow(modelo$coeficientes)){
pred = pred + modelo$coeficientes$coeficientes[k]*valores[i ,k-1] # realiza inicialmente a operação pred = beta0 + beta1 * valor_dado[1]
}                                                                # dps segue a iteração: pred = pred + beta[i] * valor_dado[i]
resultado = c(resultado, pred)
}
return(resultado)
}
modelo = reg_lin(iris, "Sepal.Length", c("Sepal.Width", "Petal.Length"))
modelo = reg_lin(iris, "Sepal.Length", c("Sepal.Width", "Petal.Length"))
modelo = reg_lin(iris, "Sepal.Length", c("Sepal.Width", "Petal.Length"))
View(reg_lin)
modelo = reg_lin(iris, "Sepal.Length", c("Sepal.Width", "Petal.Length"))
modelo$coeficientes
resultado = list()
i=1
modelo$coeficientes$coeficientes[1]
pred = modelo$coeficientes$coeficientes[1]
pred
k = 2
nrow(modelo$coeficientes)
modelo$coeficientes$coeficientes[k]
k=3
modelo$coeficientes$coeficientes[k]
yhat1 = c(4,5)
yhat2 = c(2,4)
yhat4 = c(1,8)
preditores = data.frame(yhat1, yhat2, yhat3)
preditores = data.frame(yhat1, yhat2, yhat4)
preditores
nrow(preditores)
x1 = c(1,2,3)
x2 = c(5,6,7)
x3 = c(9,0,2)
valores = data.frame(x1,x2,x3)
valores
valores = data.frame(x1,x2)
valores
nrow(valores)
i=1
pred = modelo$coeficientes$coeficientes[1]
pred
k=2
modelo$coeficientes$coeficientes[k]
valores[i ,k-1]
k=3
modelo$coeficientes$coeficientes[k]
valores[i ,k-1]
modelo
modelo$coeficientes$coeficientes
resultado = list()
for(i in 1:nrow(valores)){
pred = modelo$coeficientes$coeficientes[1] # pega o beta 0
for(k in 2:nrow(modelo$coeficientes)){
pred = pred + modelo$coeficientes$coeficientes[k]*valores[i ,k-1] # realiza inicialmente a operação pred = beta0 + beta1 * valor_dado[1]
}                                                                # dps segue a iteração: pred = pred + beta[i] * valor_dado[i]
resultado = c(resultado, pred)
}
resultado
modelo$coeficientes$coeficientes
valores
2.2491402+0.5955247+5*0.4719200
2.2491402+2*0.5955247+6*0.4719200
2.2491402+0.5955247*3+0.4719200*7
matrix(c(1, 5,
2, 6,
3, 7), nrow = 3, byrow = TRUE)
valores = matrix(c(1, 5,
2, 6,
3, 7), nrow = 3, byrow = TRUE)
predicts(modelo, valores)
predicts = function(modelo, valores){
# valores será um dataframe onde cada linha será os valores para cada predição
resultado = list()
for(i in 1:nrow(valores)){
pred = modelo$coeficientes$coeficientes[1] # pega o beta 0
for(k in 2:nrow(modelo$coeficientes)){
pred = pred + modelo$coeficientes$coeficientes[k]*valores[i ,k-1] # realiza inicialmente a operação pred = beta0 + beta1 * valor_dado[1]
}                                                                # dps segue a iteração: pred = pred + beta[i] * valor_dado[i]
resultado = c(resultado, pred)
}
return(resultado)
}
predicts = function(modelo, valores){
# valores será um dataframe onde cada linha será os valores para cada predição
resultado = list()
for(i in 1:nrow(valores)){
pred = modelo$coeficientes$coeficientes[1] # pega o beta 0
for(k in 2:nrow(modelo$coeficientes)){
pred = pred + modelo$coeficientes$coeficientes[k]*valores[i ,k-1] # realiza inicialmente a operação pred = beta0 + beta1 * valor_dado[1]
}                                                                # dps segue a iteração: pred = pred + beta[i] * valor_dado[i]
resultado = c(resultado, pred)
}
return(resultado)
}
predicts(modelo, valores)
class(resultado)
reg_lin(pacote2::df, "y", c("x1", "x2"))
modelo = reg_lin(pacote2::df, "y", c("x1", "x2"))
valores = matrix(c(1, 5,
2, 6,
3, 7), nrow = 3, byrow = TRUE)
?predicts
reg_lin = function(dados, Y, Xs){
if (!is.character(Y) || !is.character(Xs[1])) { stop("Erro: A resposta ou preditoras não estão no formato de strings") }
# DATAFRAME COM COEFICIENTES
#calculo dos betas
um = rep(1, nrow(dados))
matrix_X = c(um)
i=1
for (i in 1:length(Xs)){ matrix_X = cbind(matrix_X, dados[[Xs[i]]])
i=i+1
}
matrix_X = as.matrix(matrix_X)
for(i in 2:ncol(matrix_X)){ if(all(matrix_X[1,i] == matrix_X[,i])){ stop("Uma das preditoras é constante.") }}
if(ncol(matrix_X) < nrow(matrix_X)){posto = ncol(matrix_X)}else{posto = nrow(matrix_X)}
if(posto != qr(matrix_X)$rank){stop("A matriz tem posto incompleto.")}
matrix_Y = as.matrix(dados[[Y]])
coeficientes = solve(t(matrix_X)%*%matrix_X)  %*%t(matrix_X) %*% matrix_Y
#criando dataframe
betas = paste0("beta ", 0:(ncol(matrix_X)-1))
nomes = append(c("intercepto"), Xs)
coeficientes = as.vector(coeficientes)
# Cálculos adicionais
# resíduos
residuos = matrix_Y - matrix_X %*% coeficientes
# Soma dos quadrados dos erros
SSE = sum(residuos^2)
# Graus de liberdade
n = nrow(matrix_X)
p = ncol(matrix_X)
df = n - p
# Erro padrão do modelo
se = sqrt(SSE / df)
# Erro padrão dos coeficientes
cov_matrix = solve(t(matrix_X) %*% matrix_X)
std_errors = se * sqrt(diag(cov_matrix))
# Estatística t e p-valores
t_values = coeficientes / std_errors
p_values = 2 * (1 - pt(abs(t_values), df))
# Intervalos de confiança (IC) para cada beta
alpha = 0.05
qt_value = qt(1 - alpha / 2, df)
lower_bound = coeficientes - qt_value * std_errors
upper_bound = coeficientes + qt_value * std_errors
#dataframe:
dataframe = data.frame(
betas = betas,
nomes = nomes,
coeficientes = coeficientes,
std_errors = std_errors,
t_values = t_values,
p_values = p_values,
IC_inferior = lower_bound,
IC_superior = upper_bound
)
# LISTA COM VALORES PREDITOS
preditos = as.vector(matrix_X %*% as.matrix(coeficientes))
# LISTA COM OS RESÍDUOS
residuos = dados[[Y]]-preditos
return(list(coeficientes = dataframe, preditos = preditos, residuos = residuos))
}
dados = iris
resposta = "Sepal.Length"
preditores = c("Sepal.Width", "Petal.Length")
modelo = reg_lin(dados, resposta, preditores)
print(modelo)
modelo = reg_lin(dados, resposta, preditores)
print(modelo)$coeficientes
modelo = reg_lin(dados, resposta, preditores)
print(modelo)$coeficientes
modelo
modelo$coeficientes
reg_lin(df, "y", c("x1", "x2", "x3"))$coeficientes
reg_lin(df, "y", c("x1", "x3"))$coeficientes
reg_lin(df, "y", c("x1", "x3"))$coeficientes$coeficientes
library(pacote2)
reg_lin(df, "y", c("x1", "x2", "x3"))
reg_lin(df, "y", c("x1", "x2", "x3"))$coeficientes
plot(df$x1, modelo$residuos)
modelo = reg_lin(df, "y", c("x1", "x2", "x3"))
modelo$coeficientes
plot(df$x1, modelo$residuos)
valores = matrix(c(1, 5,
2, 6,
3, 7), nrow = 3, byrow = TRUE)
predicts(modelo, valores)
ncol(valores)
nrow(modelo$coeficientes)
modelo$coeficientes
ncol(valores) != nrow(modelo$coeficientes) - 1
predicts(modelo, valores)
predicts(modelo, valores)
reg_lin(df, 9, c(3,5))
valores
modelo$coeficientes
nrow(modelo$coeficientes) - 1
ncol(valores) != nrow(modelo$coeficientes) - 1
if(ncol(valores) != nrow(modelo$coeficientes) - 1){stop("Valores incompletos.")}
predicts = function(modelo, valores){
if(ncol(valores) != nrow(modelo$coeficientes) - 1){stop("Valores incompletos.")}
resultado = list()
for(i in 1:nrow(valores)){
pred = modelo$coeficientes$coeficientes[1]
for(k in 2:nrow(modelo$coeficientes)){
pred = pred + modelo$coeficientes$coeficientes[k]*valores[i ,k-1]
}
resultado = c(resultado, pred)
}
return(resultado)
}
preficts(modelo, valores)
predicts(modelo, valores)
predicts = function(modelo, valores){
if(ncol(valores) != nrow(modelo$coeficientes) - 1){stop("O número de parâmetros dado e no modelo são diferentes.")}
resultado = list()
for(i in 1:nrow(valores)){
pred = modelo$coeficientes$coeficientes[1]
for(k in 2:nrow(modelo$coeficientes)){
pred = pred + modelo$coeficientes$coeficientes[k]*valores[i ,k-1]
}
resultado = c(resultado, pred)
}
return(resultado)
}
predicts(modelo, valores)
valores = matrix(c(1, 5,
2, 6,
3, 7), nrow = 3, byrow = TRUE)
predicts(modelo, valores)
valores = matrix(c(1, 5, 2,
2, 6, 4,
3, 7, 9), nrow = 3, byrow = TRUE)
predicts(modelo, valores)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
?graf_pvo
?graf_pvo
?graf_pvo
?geom_point
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
?graf_pvo
x1 = c(13, 21, 33)
x2 = c(20, 37, 49)
y = 5 + 2*x1 + 3*x2
teste <- data.frame(y, x1, x2)
reg_lin(teste, "y", c("x1", "x2"))$coeficientes
graf_pvo = function(modelo, x_var, fixas = list(), dados) {
# Verifica se os preditos têm o mesmo tamanho que os dados
if (length(modelo$preditos) != nrow(dados)) stop("O vetor de preditos deve ter o mesmo comprimento que os dados.")
dados$predito = modelo$preditos # Adiciona os valores preditos no conjunto de dados pra fazer o gráfico
# Cria uma base de dados para ser possível fazer a reta de regressão
grid_dados = data.frame(x_var = seq(min(dados[[x_var]]), max(dados[[x_var]]), length.out = length(dados[[x_var]])))
names(grid_dados)[1] = x_var
# Adiciona os valores fixos para as demais variáveis no grid de dados
for (var in names(fixas)) {
grid_dados[[var]] = fixas[[var]]
}
# Adiciona o intercepto e as variáveis no grid de dados para fazer a reta de regressão
matrix_grid = cbind(1, grid_dados)  # Intercepto
coef = modelo$coeficientes$coeficientes
grid_dados$predito = as.vector(as.matrix(matrix_grid) %*% coef)  # Calcula preditos pra reta
grafico = ggplot(dados, aes(x = .data[[x_var]], y = .data[["predito"]])) +
geom_point(color = "black", size = 2) +  # Pontos preditos vs observados
geom_line(data = grid_dados, aes_string(x = x_var, y = "predito"), color = "blue", size = 1) +  # Reta de regressão
labs(x = paste("Valores de", x_var), y = "Valores Preditos") +
theme_bw() +
ggtitle("Gráfico de Valores Observados vs Preditos")
return(grafico)
}
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo = function(modelo, x_var, fixas = list(), dados) {
# Verifica se os preditos têm o mesmo tamanho que os dados
if (length(modelo$preditos) != nrow(dados)) stop("O vetor de preditos deve ter o mesmo comprimento que os dados.")
dados$predito = modelo$preditos # Adiciona os valores preditos no conjunto de dados pra fazer o gráfico
# Cria uma base de dados para ser possível fazer a reta de regressão
grid_dados = data.frame(x_var = seq(min(dados[[x_var]]), max(dados[[x_var]]), length.out = length(dados[[x_var]])))
names(grid_dados)[1] = x_var
# Adiciona os valores fixos para as demais variáveis no grid de dados
for (var in names(fixas)) {
grid_dados[[var]] = fixas[[var]]
}
# Adiciona o intercepto e as variáveis no grid de dados para fazer a reta de regressão
matrix_grid = cbind(1, grid_dados)  # Intercepto
coef = modelo$coeficientes$coeficientes
grid_dados$predito = as.vector(as.matrix(matrix_grid) %*% coef)  # Calcula preditos pra reta
grafico = ggplot(dados, aes(x = x_var, y = "predito")) +
geom_point(color = "black", size = 2) +  # Pontos preditos vs observados
geom_line(data = grid_dados, aes_string(x = x_var, y = "predito"), color = "blue", size = 1) +  # Reta de regressão
labs(x = paste("Valores de", x_var), y = "Valores Preditos") +
theme_bw() +
ggtitle("Gráfico de Valores Observados vs Preditos")
return(grafico)
}
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
?ggplot
graf_pvo = function(modelo, x_var, fixas = list(), dados) {
# Verifica se os preditos têm o mesmo tamanho que os dados
if (length(modelo$preditos) != nrow(dados)) stop("O vetor de preditos deve ter o mesmo comprimento que os dados.")
dados$predito = modelo$preditos # Adiciona os valores preditos no conjunto de dados pra fazer o gráfico
# Cria uma base de dados para ser possível fazer a reta de regressão
grid_dados = data.frame(x_var = seq(min(dados[[x_var]]), max(dados[[x_var]]), length.out = length(dados[[x_var]])))
names(grid_dados)[1] = x_var
# Adiciona os valores fixos para as demais variáveis no grid de dados
for (var in names(fixas)) {
grid_dados[[var]] = fixas[[var]]
}
# Adiciona o intercepto e as variáveis no grid de dados para fazer a reta de regressão
matrix_grid = cbind(1, grid_dados)  # Intercepto
coef = modelo$coeficientes$coeficientes
grid_dados$predito = as.vector(as.matrix(matrix_grid) %*% coef)  # Calcula preditos pra reta
grafico = ggplot(dados, aes_string(x = x_var, y = "predito")) +
geom_point(color = "black", size = 2) +  # Pontos preditos vs observados
geom_line(data = grid_dados, aes_string(x = x_var, y = "predito"), color = "blue", size = 1) +  # Reta de regressão
labs(x = paste("Valores de", x_var), y = "Valores Preditos") +
theme_bw() +
ggtitle("Gráfico de Valores Observados vs Preditos")
return(grafico)
}
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
?reg_lin
?graf_pvo
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
lm(iris, Sepal.Length~Sepal.Width)
lm(Sepal.Length~Sepal.Width, iris)
summary(lm(Sepal.Length~Sepal.Width, iris))
modelo = reg_lin(df, "y", c("x1", "x2", "x3"))
graf_pvo(modelo, x_var = "x1", fixas = list(x2 = 0.5, x3 = 0.5), dados = df)
graf_pvo(modelo, "x2", list(x1 = 0.7, x3 = 0.1), df)
graf_pvo(saida_regressao_linear, "x3", fixas = list(x1 = 0.5, x2 = 0.9), df)
graf_pvo(modelo, "x3", fixas = list(x1 = 0.5, x2 = 0.9), df)
usethis::use_gpl3_license()
usethis::use_gpl3_license()
?test_that
expect_
library(testthat)
?expect_warning()
x1 = c(13, 21, 33)
x2 = c(20, 37, 49)
y = 5 + 2*x1 + 3*x2
teste <- data.frame(y, x1, x2)
reg_lin(teste, "y", c("x1", "x2"))$coeficientes
reg_lin(teste, "y", c("x1", "x2"))$coeficientes$p_valor
class(reg_lin(teste, "y", c("x1", "x2"))$coeficientes$p_valor)
